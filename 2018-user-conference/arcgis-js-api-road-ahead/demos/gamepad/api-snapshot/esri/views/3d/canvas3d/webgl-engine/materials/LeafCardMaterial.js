// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.8/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/canvas3d/webgl-engine/materials/LeafCardMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3csnippet name\x3d"vertexShaderLeafCard"\x3e\r\n\t\x3c![CDATA[\r\n\tuniform mat4 proj;\r\n\tuniform mat4 view;\r\n\tuniform mat4 model;\r\n\tuniform mat4 modelNormal;\r\n\tattribute vec3 $position;\r\n\tattribute vec4 $normal;\r\n\tattribute vec4 $uv0;\r\n\tvarying vec2 vtc;\r\n\tvarying vec3 vnormal;\r\n\tvarying float ambientLeaf;\r\n\r\n\tuniform float trafoScale;\r\n\tvarying vec3 vpos;\r\n\r\n\t// TODO optimize?\r\n\tvec2 rotate(vec2 pos, float angle) {\r\n\t\tfloat c \x3d cos(angle);\r\n\t\tfloat s \x3d sin(angle);\r\n\t\treturn vec2(c * pos.x - s * pos.y, s * pos.x + c * pos.y);\r\n\t}\r\n\r\n\tvoid main(void) {\r\n\r\n\t\tvpos \x3d (model * vec4($position, 1.0)).xyz;\r\n\r\n\t\tvec3 pos \x3d (view * model * vec4($position, 1.0)).xyz;\r\n\t\tvec2 uv01 \x3d floor($uv0.xy);\r\n\t\tvec2 uv \x3d $uv0.xy - uv01;\r\n\r\n   \t\tvec2 up \x3d rotate(vec2(1,0), $uv0.z);\r\n   \t\tvec3 xDir \x3d  vec3(up.x,up.y,0.0);\r\n   \t\tvec3 yDir \x3d  vec3(-up.y,up.x,0.0);\r\n\r\n\t\tpos +\x3d xDir * (uv01.x - .5) * $uv0.w *trafoScale;\r\n\t\tpos +\x3d yDir * (uv01.y - .5) * $uv0.w *trafoScale;;\r\n\t\tvec4 pos4 \x3d proj * vec4(pos, 1.0);\r\n\t\tgl_Position \x3d pos4;\r\n\t\tvtc \x3d uv;\r\n\t\tambientLeaf \x3d normal.w;\r\n\t\tvnormal \x3d normalize((modelNormal * vec4($normal.xyz, 1.0)).xyz);\r\n\t}\r\n]]\x3e\r\n\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fragmentShaderLeafCard"\x3e\r\n\x3c![CDATA[\r\n\tprecision mediump float;\r\n\r\n\tuniform vec3 camPos;\r\n\r\n\tuniform vec4 lightAmbient;\r\n\tuniform vec4 lightDiffuse;\r\n\tuniform vec4 lightSpecular;\r\n\tuniform vec3 lightDirection;\r\n\r\n\tuniform vec3 ambient;\r\n\tuniform vec3 diffuse;\r\n\tuniform vec3 specular;\r\n\tuniform float shininess;\r\n\r\n\tuniform sampler2D tex;\r\n\tvarying vec2 vtc;\r\n\tvarying vec3 vnormal;\r\n\tvarying float ambientLeaf;\r\n\r\n\tvarying vec3 vpos;\r\n\r\n\tvoid main() {\r\n\t\tvec4 texColor \x3d texture2D(tex, vtc);\r\n\t\tif (texColor.a \x3c .33) discard;\r\n\r\n\t\tvec3 a \x3d ambient * lightAmbient.rgb * lightAmbient.w;\r\n\t\tvec3 d \x3d diffuse * lightDiffuse.rgb * lightDiffuse.w * clamp(dot(vnormal, lightDirection), .0, 1.0);\r\n\r\n\t\tvec3 reflDir \x3d normalize(reflect(vpos - camPos, vnormal));\r\n\t\tfloat specDot \x3d max(dot(reflDir, lightDirection), .001);\r\n\t\tvec3 s \x3d specular * lightSpecular.rgb * lightSpecular.w * pow(specDot, shininess);\r\n\r\n\t\tgl_FragColor \x3d vec4(ambientLeaf * texColor.rgb * (a + d) + s, texColor.a);\r\n\r\n\t\t//gl_FragColor \x3d vec4(ambient,1.0);\r\n\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\r\n\x3csnippet name\x3d"vertexShaderLeafCardDepth"\x3e\x3c![CDATA[\r\n   \tuniform mat4 proj;\r\n   \tuniform mat4 view;\r\n   \tuniform mat4 model;\r\n   \tuniform vec2 nearFar;\r\n\r\n   \tattribute vec3 $position;\r\n   \tattribute vec4 $uv0;\r\n\r\n   \tuniform float trafoScale;\r\n\r\n   \tvarying vec2 vtc;\r\n   \tvarying float depth;\r\n\r\n   \t// TODO optimize?\r\n   \tvec2 rotate(vec2 pos, float angle) {\r\n   \t\tfloat c \x3d cos(angle);\r\n   \t\tfloat s \x3d sin(angle);\r\n   \t\treturn vec2(c * pos.x - s * pos.y, s * pos.x + c * pos.y);\r\n   \t}\r\n\r\n   \tvoid main(void) {\r\n   \t\tvec3 pos \x3d (view * model * vec4($position, 1.0)).xyz;\r\n   \t\tvec2 uv01 \x3d floor($uv0.xy);\r\n   \t\tvec2 uv \x3d $uv0.xy - uv01;\r\n\r\n   \t\tvec2 up \x3d rotate(vec2(1,0), $uv0.z);\r\n   \t\tvec3 xDir \x3d  vec3(up.x,up.y,0.0);\r\n   \t\tvec3 yDir \x3d  vec3(-up.y,up.x,0.0);\r\n\r\n   \t\tpos +\x3d xDir * (uv01.x - .5) * $uv0.w*trafoScale;\r\n   \t\tpos +\x3d yDir * (uv01.y - .5) * $uv0.w*trafoScale;\r\n   \t\tvec4 pos4 \x3d proj * vec4(pos, 1.0);\r\n   \t\tgl_Position \x3d pos4;\r\n   \t\tvtc \x3d uv;\r\n\r\n   \t\tdepth \x3d (-pos.z - nearFar[0]) / (nearFar[1] - nearFar[0]);\r\n\r\n   \t}\r\n ]]\x3e\x3c/snippet\x3e\r\n\r\n\x3c/snippets\x3e'}});
define("dojo/text!./LeafCardMaterial.xml ./internal/MaterialUtil ../lib/VertexBufferLayout ../lib/GLSLProgram ../lib/GLSLShader ../lib/Util ../lib/gl-matrix".split(" "),function(P,z,Q,J,K,N,g){var b=g.vec3,I=g.mat4,L=g.mat4d,M=N.VertexAttrConstants;g=function(w,x,q,d,f,a){function r(){return 2*Math.random()-1}z.basicMaterialConstructor(this,a);var g=new Q([M.POSITION,M.NORMAL,M.UV0],[3,4,4]),D=g.getStride();this.getAmbient=function(){return x};this.getDiffuse=function(){return q};this.getSpecular=
function(){return d};this.getShininess=function(){return f};this.dispose=function(){};this.getTextureId=function(){return w};this.getOutputAmount=function(a){var b=0,d;for(d=0;d<a/6;d++)0===d%1&&(b+=6);a=b;for(d=b=0;d<a/6;d++)0===d%1&&(b+=6);return b*D};this.getVertexBufferLayout=function(){return g};this.reduce=function(a,d){var b=a.position,D=a.normal;a=a.uv0;for(var e=[],c=[],w=[],p=0,f=0;f<b.length/6;f++)if(0===f%d)for(var r=0;6>r;r++)e[p]=b[6*f+r],c[p]=D[6*f+r],w[p]=a[6*f+r],p++;return{position:e,
normal:c,uv0:w}};this.fillInterleaved=function(a,d,w,f,e,c){f=z.fill;var m=this.reduce(a.faces.indices,1),m=this.reduce(m,1),p=this.getOutputAmount(a.faces.indices.position.length);N.assert(p===m.position.length*D);var x=m.position,q=m.normal,g=m.uv0,m=a.vertexAttr.position.data,E=a.vertexAttr.normal.data,B=a.vertexAttr.uv0.data,u=b.create();a=x.length/6;for(var p=c,y=b.createFrom(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),t=b.createFrom(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),
F=0;F<a;++F){for(var h=b.create(),n=b.create(),k=[100,100,-100,-100],v=b.create(),l=0;6>l;++l){var A=6*F+l,G=3*x[A],H=3*q[A],A=2*g[A];h[0]+=m[G+0];h[1]+=m[G+1];h[2]+=m[G+2];n[0]+=E[H+0];n[1]+=E[H+1];n[2]+=E[H+2];H=B[A+0];A=B[A+1];k[0]=Math.min(k[0],H);k[1]=Math.min(k[1],A);k[2]=Math.max(k[2],H);k[3]=Math.max(k[3],A);0===l&&b.set3(m[G+0],m[G+1],m[G+2],v)}h[0]/=6;h[1]/=6;h[2]/=6;n[0]/=6;n[1]/=6;n[2]/=6;h[0]+=.1*r();h[1]+=.1*r();h[2]+=.1*r();void 0!==d&&(L.multiplyVec3(d,v,v),L.multiplyVec3(d,h,h),L.multiplyVec3(w,
n,n));b.add(h,u,u);b.max(y,h,y);b.min(t,h,t);k[0]+=.01;k[1]+=.01;k[2]-=.01;k[3]-=.01;for(l=0;4>l;l++)k[l]=Math.min(k[l],.99999);l=2*Math.random()*Math.PI;v=1.41*b.dist(v,h);c+=f(h,0,e,c,void 0,3);c+=f(n,0,e,c,void 0,3);e[c++]=0;e[c++]=k[0];e[c++]=k[1];e[c++]=l;e[c++]=v;c+=f(h,0,e,c,void 0,3);c+=f(n,0,e,c,void 0,3);e[c++]=0;e[c++]=k[2]+1;e[c++]=k[1];e[c++]=l;e[c++]=v;c+=f(h,0,e,c,void 0,3);c+=f(n,0,e,c,void 0,3);e[c++]=0;e[c++]=k[2]+1;e[c++]=k[3]+1;e[c++]=l;e[c++]=v;c+=f(h,0,e,c,void 0,3);c+=f(n,0,
e,c,void 0,3);e[c++]=0;e[c++]=k[2]+1;e[c++]=k[3]+1;e[c++]=l;e[c++]=v;c+=f(h,0,e,c,void 0,3);c+=f(n,0,e,c,void 0,3);e[c++]=0;e[c++]=k[0];e[c++]=k[3]+1;e[c++]=l;e[c++]=v;c+=f(h,0,e,c,void 0,3);c+=f(n,0,e,c,void 0,3);e[c++]=0;e[c++]=k[0];e[c++]=k[1];e[c++]=l;e[c++]=v}u[0]/=a;u[1]/=a;u[2]/=a;d=b.create();b.add(y,t,d);b.scale(d,.5,d);c=b.create();b.subtract(y,t,c);c[0]=Math.abs(c[0])/2;c[1]=Math.abs(c[1])/2;c[2]=Math.abs(c[2])/2;x=b.create(u);x[1]-=(y[1]-t[1])/3;y=b.create();t=b.create();m=b.create();
q=[b.create(),b.create(),b.create(),b.create()];u=[0,0,0,0];g=I.create();for(F=0;F<a;++F){b.set3(e[p],e[p+1],e[p+2],m);b.subtract(m,x,y);b.normalize(y,y);t=b.subtract(m,d,t);b.normalize(t,t);B=Math.abs(b.dot(t,[1,0,0]));l=Math.abs(b.dot(t,[0,1,0]));E=Math.abs(b.dot(t,[0,0,1]));B=B*Math.abs(d[0]-m[0])/c[0];B+=l*Math.abs(d[1]-m[1])/c[1];B+=E*Math.abs(d[2]-m[2])/c[2];for(l=0;4>l;l++)I.identity(g),I.rotate(g,.8*r(),[0,1,0],g),I.rotate(g,.8*r(),[1,0,0],g),I.multiplyVec3(g,y,q[l]),u[l]=.5+.5*B-.2*r();E=
.8+.3*r();for(l=0;6>l;++l){var C;switch(l){case 0:C=0;break;case 1:C=1;break;case 2:C=2;break;case 3:C=2;break;case 4:C=3;break;case 5:C=0}p+=3;p+=f(q[C],0,e,p,w,3);e[p++]=u[C];p+=3;e[p++]*=E}}};this.intersect=function(){};this.getGLMaterials=function(){return[R,S,void 0,O]};this.getAllTextureIds=function(){return[w]}};var R=function(b,x,g){z.basicGLMaterialConstructor(this,b);var d=x.get("leafCard");z.singleTextureGLMaterialConstructor(this,g,{textureId:b.getTextureId()});this.beginSlot=function(a){return 2===
a};this.getProgram=function(){return d};var f=b.getAmbient(),a=b.getDiffuse(),w=b.getSpecular(),q=b.getShininess();this.bind=function(D,p){d.use();this.bindTexture(D,d);d.uniform3fv("ambient",f);d.uniform3fv("diffuse",a);d.uniform3fv("specular",w);d.uniform1f("shininess",q);d.uniform1f("trafoScale",1);b.getVertexBufferLayout().enableVertexAttribArrays(D,d)};this.release=function(a){b.getVertexBufferLayout().disableVertexAttribArrays(a,d)};this.bindView=function(a,b){z.bindView(b.origin,b.view,d);
z.bindCamPos(b.origin,b.viewInvTransp,d)};this.bindInstance=function(a,b){d.uniformMatrix4fv("model",b.transformation);d.uniformMatrix4fv("modelNormal",b.transformationNormal);a=b.transformation;d.uniform1f("trafoScale",(Math.sqrt(a[0]*a[0]+a[4]*a[4]+a[8]*a[8])+Math.sqrt(a[1]*a[1]+a[5]*a[5]+a[9]*a[9])+Math.sqrt(a[2]*a[2]+a[6]*a[6]+a[10]*a[10]))/3)};this.getDrawMode=function(a){return a.TRIANGLES}},O=function(b,g,q,d){z.basicGLMaterialConstructor(this,b);var f=null==d?g.get("leafCardDepth"):g.get("leafCardDepthShadowMap");
z.singleTextureGLMaterialConstructor(this,q,{textureId:b.getTextureId()});this.beginSlot=function(a){return 2===a};this.getProgram=function(){return f};this.bind=function(a,d){f.use();this.bindTexture(a,f);f.uniform2fv("nearFar",d.nearFar);b.getVertexBufferLayout().enableVertexAttribArrays(a,f)};this.release=function(a){b.getVertexBufferLayout().disableVertexAttribArrays(a,f)};this.bindView=function(a,b){z.bindView(b.origin,b.view,f)};this.bindInstance=function(a,b){f.uniformMatrix4fv("model",b.transformation);
a=b.transformation;f.uniform1f("trafoScale",(Math.sqrt(a[0]*a[0]+a[4]*a[4]+a[8]*a[8])+Math.sqrt(a[1]*a[1]+a[5]*a[5]+a[9]*a[9])+Math.sqrt(a[2]*a[2]+a[6]*a[6]+a[10]*a[10]))/3)};this.getDrawMode=function(a){return a.TRIANGLES}},S=function(b,g,q){O.call(this,b,g,q,!0)};g.loadShaders=function(b,g,q,d){b._parse(P);var f=new K(d.VERTEX_SHADER,b.vertexShaderLeafCard,d),a=new K(d.FRAGMENT_SHADER,b.fragmentShaderLeafCard,d),f=new J([f,a],d);b=new K(d.VERTEX_SHADER,b.vertexShaderLeafCardDepth,d);a=g.get("fsDepthTextured");
g=g.get("fsDepthTexturedShadowMap");a=new J([b,a],d);d=new J([b,g],d);q.add("leafCard",f);q.add("leafCardDepth",a);q.add("leafCardDepthShadowMap",d)};return g});