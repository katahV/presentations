// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.8/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/canvas3d/webgl-engine/materials/AtmosphereMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3csnippet name\x3d"vsAtmosphere"\x3e\x3c![CDATA[\r\n\tconst float TWICEPI \x3d 2.0*3.14159265;\r\n\tconst float ATMOSPHERE_RIM_SEGMENTS \x3d 128.0;\r\n\r\n\tuniform mat4 proj;\r\n\tuniform mat4 view;\r\n\tuniform mat4 model;\r\n\r\n\tuniform vec3 silCircleCenter;\r\n\tuniform vec3 silCircleV1;\r\n\tuniform vec3 silCircleV2;\r\n\tuniform vec3 lightDirection;\r\n\tuniform vec2 texV;\r\n\r\n\tattribute vec3 $position;\r\n\tvarying vec2 vtc;\r\n\tvarying float falloff;\r\n\r\n\tvoid main(void) {\r\n\t\tfloat phi \x3d $position.x*(TWICEPI / ATMOSPHERE_RIM_SEGMENTS) + 1.0;\r\n\t\tvec3 pos \x3d (sin(phi)*silCircleV1 + cos(phi)*silCircleV2 + silCircleCenter) * $position.y;\r\n\t\t\r\n  \tfloat ndotl \x3d dot(normalize(pos), normalize(lightDirection));\r\n  \tfalloff \x3d max(0.0, (smoothstep(-1.0, 0.8, ndotl + ndotl)));\r\n\t\r\n\t\tvtc.x \x3d $position.x / ATMOSPHERE_RIM_SEGMENTS;\r\n\t\tvtc.y \x3d texV.x * (1.0 - $position.z) + texV.y * $position.z;\r\n\r\n\t\tgl_Position \x3d proj * view * model * vec4(pos, 1.0);\r\n\t\tgl_Position.z \x3d 0.0;\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fsAtmosphere"\x3e\x3c![CDATA[\r\n\tprecision mediump float;\r\n\r\n\tuniform sampler2D tex;\r\n\tuniform vec4 color;\r\n\tvarying vec2 vtc;\r\n\tvarying float falloff;\r\n\r\n\tvoid main() {\r\n\t\tvec4 texColor \x3d texture2D(tex, vtc);\r\n\t\tgl_FragColor \x3d texColor * color * falloff;\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3c/snippets\x3e'}});
define(["dojo/text!./AtmosphereMaterial.xml","./internal/MaterialUtil","../lib/GLSLProgram","../lib/GLSLShader"],function(l,e,m,f){var k=function(b,g,h){e.basicMaterialConstructor(this,h);var a=e.Layouts.Pos;this.dispose=function(){};this.getTextureId=function(){return b};this.getGeometricData=function(){return g};this.getOutputAmount=function(b){return b*a.getStride()};this.getVertexBufferLayout=function(){return a};this.fillInterleaved=function(b,c,d,g,h,f,k){e.fillInterleaved(b,c,d,g,a,h,f,k)};
this.intersect=e.intersectTriangleGeometry;this.getGLMaterials=function(){return[n,void 0,void 0]};this.getAllTextureIds=function(){return[b]}},n=function(b,g,h){e.basicGLMaterialConstructor(this,b);var a=g.get("atmosphere");e.singleTextureGLMaterialConstructor(this,h,{textureId:b.getTextureId()},!0);var f=b.getGeometricData();this.beginSlot=function(a){return 0===a};this.getProgram=function(){return a};this.bind=function(c,d){a.use();a.uniform4f("color",1,1,1,1);this.bindTexture(c,a);d=d.lightingData.getLightDirection();
a.uniform3fv("silCircleCenter",f.silCircleCenter);a.uniform3fv("silCircleV1",f.silCircleV1);a.uniform3fv("silCircleV2",f.silCircleV2);a.uniform3fv("lightDirection",d);a.uniform2fv("texV",f.texV);b.getVertexBufferLayout().enableVertexAttribArrays(c,a,!1);c.enable(c.BLEND);c.disable(c.DEPTH_TEST)};this.release=function(c){c.disable(c.BLEND);c.enable(c.DEPTH_TEST);b.getVertexBufferLayout().disableVertexAttribArrays(c,a,!1)};this.bindView=function(b,d){e.bindView(d.origin,d.view,a)};this.bindInstance=
function(b,d){a.uniformMatrix4fv("model",d.transformation)};this.getDrawMode=function(a){return a.TRIANGLES}};k.loadShaders=function(b,g,e,a){b._parse(l);g=new f(a.VERTEX_SHADER,b.vsAtmosphere,a);b=new f(a.FRAGMENT_SHADER,b.fsAtmosphere,a);a=new m([g,b],a);e.add("atmosphere",a)};return k});